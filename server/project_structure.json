{
    "projectname": "",
    "structure": {
      "server.js": "// server.js\n// Load .env file variables first\nrequire(\"dotenv\").config({ path: \"./config.env\" }); // Load .env file variables\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst morgan = require(\"morgan\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst connectDB = require(\"./src/config/db\");\nconst AppError = require(\"./src/utils/appError\");\nconst globalErrorHandler = require(\"./src/middleware/errorMiddleware\");\n\n// Import Routers\nconst authRoutes = require(\"./src/routes/authRoutes\");\nconst webhookRoutes = require(\"./src/routes/webhookRoutes\");\n\n// Initialize Express App\nconst app = express();\n\n// Connect to Database (Run this early, but doesn't need to block export)\nconnectDB();\n\n// --- Middleware ---\napp.use(cors());\napp.options(\"*\", cors());\n\nif (process.env.NODE_ENV !== \"production\") {\n  // Log in dev and test\n  app.use(morgan(\"dev\"));\n}\n\n// Define base API path\nconst apiBase = \"/api/v1\";\n\n// MODIFIED: Apply raw body parser ONLY for the specific Razorpay webhook route *FIRST*\n// This ensures req.rawBody is available for signature verification.\napp.use(\n  `${apiBase}/webhooks/razorpay`,\n  express.raw({ type: \"application/json\" })\n);\n\n// MODIFIED: Apply standard JSON/URLencoded parsers *AFTER* the raw one\napp.use(express.json({ limit: \"10kb\" }));\napp.use(express.urlencoded({ extended: true, limit: \"10kb\" }));\n\n// --- API Routes ---\napp.use(`${apiBase}/auth`, authRoutes);\napp.use(`${apiBase}/users`, require(\"./src/routes/userRoutes\")); // Example inline require\napp.use(`${apiBase}/roles`, require(\"./src/routes/roleRoutes\"));\napp.use(`${apiBase}/permissions`, require(\"./src/routes/permissionRoutes\"));\napp.use(`${apiBase}/settings`, require(\"./src/routes/settingRoutes\"));\napp.use(`${apiBase}/plans`, require(\"./src/routes/planRoutes\"));\napp.use(`${apiBase}/channels`, require(\"./src/routes/channelRoutes\"));\napp.use(`${apiBase}/links`, require(\"./src/routes/linkRoutes\"));\napp.use(`${apiBase}/subscriptions`, require(\"./src/routes/subscriptionRoutes\"));\napp.use(`${apiBase}/transactions`, require(\"./src/routes/transactionRoutes\"));\napp.use(`${apiBase}/reminders`, require(\"./src/routes/reminderRoutes\"));\napp.use(`${apiBase}/analytics`, require(\"./src/routes/analyticsRoutes\"));\napp.use(`${apiBase}/logs`, require(\"./src/routes/logRoutes\"));\napp.use(`${apiBase}/faqs`, require(\"./src/routes/faqRoutes\"));\napp.use(`${apiBase}/webhooks`, webhookRoutes); // Mounts handlers for other webhooks like /whatsapp/status\n\n// Health Check Route\napp.get(`${apiBase}/health`, (req, res) => {\n  res.status(200).json({ status: \"UP\" });\n});\n\n// Handle Undefined Routes (Catch-all)\napp.all(\"*\", (req, res, next) => {\n  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));\n});\n\n// Global Error Handling Middleware\napp.use(globalErrorHandler);\n\n// --- Export the Express App Instance BEFORE starting the server ---\nmodule.exports = app; // Use CommonJS export if server.js is CommonJS\n\n// --- Start Server only if NOT in test environment ---\nif (process.env.NODE_ENV !== \"test\") {\n  // Start Scheduled Jobs\n  require(\"./src/jobs/subscriptionJobs\").runSubscriptionJobs();\n\n  // Start Server\n  const PORT = process.env.PORT || 5001;\n  const server = app.listen(PORT, () => {\n    console.log(\n      `Server running in ${\n        process.env.NODE_ENV || \"development\"\n      } mode on port ${PORT}`\n    );\n  });\n\n  // Handle Unhandled Rejections\n  process.on(\"unhandledRejection\", (err) => {\n    console.error(\"UNHANDLED REJECTION! \u00f0\u0178\u2019\u00a5 Shutting down...\");\n    console.error(err.name, err.message, err.stack);\n    server.close(() => {\n      process.exit(1);\n    });\n  });\n\n  // Handle SIGTERM\n  process.on(\"SIGTERM\", () => {\n    console.log(\"\u00f0\u0178\u2018\u2039 SIGTERM RECEIVED. Shutting down gracefully\");\n    server.close(() => {\n      console.log(\"\u00f0\u0178\u2019\u00a5 Process terminated!\");\n    });\n  });\n}\n"
    }
  }